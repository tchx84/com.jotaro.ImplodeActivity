diff --git a/implodeactivity.py b/implodeactivity.py
index 71900d5..84467a5 100644
--- a/implodeactivity.py
+++ b/implodeactivity.py
@@ -21,13 +21,12 @@ _logger = logging.getLogger('implode-activity')
 
 from gettext import gettext as _
 
-from sugar3.activity.activity import Activity
 from sugar3.graphics import style
 from sugar3.graphics.icon import Icon
 from sugar3.graphics.radiotoolbutton import RadioToolButton
 from sugar3.graphics.toolbutton import ToolButton
 
-from sugar3.activity.widgets import ActivityToolbarButton, StopButton
+from sugar3.activity.widgets import StopButton
 from sugar3.graphics.toolbarbox import ToolbarBox
 
 from implodegame import ImplodeGame
@@ -43,8 +42,10 @@ from gi.repository import Gdk
 
 from keymap import KEY_MAP
 
+from sugarapp.widgets import SugarCompatibleActivity
+from sugarapp.widgets import ExtendedActivityToolbarButton
 
-class ImplodeActivity(Activity):
+class ImplodeActivity(SugarCompatibleActivity):
     def __init__(self, handle):
         super(ImplodeActivity, self).__init__(handle)
 
@@ -75,13 +76,6 @@ class ImplodeActivity(Activity):
 
         self._game.grab_focus()
 
-        last_game_path = self._get_last_game_path()
-        if os.path.exists(last_game_path):
-            self.read_file(last_game_path)
-
-    def _get_last_game_path(self):
-        return os.path.join(self.get_activity_root(), 'data', 'last_game')
-
     def read_file(self, file_path):
         # Loads the game state from a file.
         f = open(file_path, 'rt')
@@ -95,22 +89,20 @@ class ImplodeActivity(Activity):
         (file_type, version, game_data) = file_data
         if file_type == 'Implode save game' and version <= [1, 0]:
             if not game_data['win_draw_flag']:
+                # Ensure that the visual display matches the game state.
+                self._levels_buttons[game_data['difficulty']].props.active = True
                 self._game.set_game_state(game_data)
-            # Ensure that the visual display matches the game state.
-            self._levels_buttons[game_data['difficulty']].props.active = True
 
     def write_file(self, file_path):
         # Writes the game state to a file.
         game_data = self._game.get_game_state()
         file_data = ['Implode save game', [1, 0], game_data]
-        last_game_path = self._get_last_game_path()
-        for path in (file_path, last_game_path):
-            f = open(path, 'wt')
-            io = StringIO()
-            json.dump(file_data, io)
-            content = io.getvalue()
-            f.write(content)
-            f.close()
+        f = open(file_path, 'wt')
+        io = StringIO()
+        json.dump(file_data, io)
+        content = io.getvalue()
+        f.write(content)
+        f.close()
 
     def _show_stuck_cb(self, state, data=None):
         if data:
@@ -152,7 +144,7 @@ class ImplodeActivity(Activity):
         toolbar_box = ToolbarBox()
         toolbar = toolbar_box.toolbar
 
-        activity_button = ActivityToolbarButton(self)
+        activity_button = ExtendedActivityToolbarButton(self)
         toolbar_box.toolbar.insert(activity_button, 0)
         activity_button.show()
 
